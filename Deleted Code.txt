    def run_without_aperture_Threading(self):
        sleep(0.1)
        self.threading = True
        if not self.parameter_checker():
            self.start_Initiation = False
        else:
            self.go_home()
            if self.clicked_startvalue.get() == "mm":
                maxima_point_from_home_in_mm = float(self.startvalueentry.get())
            else:
                maxima_point_from_home_in_mm = (float(self.startvalueentry.get()) / 1000)
            if self.clicked_stopvalue.get() == "mm":
                sweeping_distance_in_mm = float(self.endvalueentry.get())
            else:
                sweeping_distance_in_mm = (float(self.endvalueentry.get()) / 1000)
            if self.clicked_stepvalue.get() == "mm":
                stepvalue_in_mm = float(self.stepvalueentry.get())
            else:
                stepvalue_in_mm = (float(self.stepvalueentry.get()) / 1000)
            self.sendCommand(self.clockwiseCommand)
            if self.receiveCommand() == self.clockwise_ok:
                self.take_position(maxima_point_from_home_in_mm - sweeping_distance_in_mm)
            initial_point = -sweeping_distance_in_mm
            final_point = sweeping_distance_in_mm
            self.ax.set_xlim([initial_point, final_point])
            current_point = initial_point
            self.x_data = np.array([])
            self.y_data = np.array([])
            self.lines2.set_xdata(self.x_data)
            self.lines2.set_ydata(self.y_data)
            self.lines.set_xdata(self.x_data)
            self.lines.set_ydata(self.y_data)
            self.lines.set_color("blue")
            self.canvas.draw()
            while (current_point < final_point) and self.threading and self.start_Initiation:
                self.x_data = np.append(self.x_data, current_point)
                self.y_data = np.append(self.y_data, float(self.detector.query("read?")))
                y_max = self.y_data.max()
                y_min = self.y_data.min()

                y_min = y_min - (y_min * 0.01)
                y_max = y_max + (y_max * 0.01)
                self.ax.set_ylim([y_min, y_max])
                self.lines.set_xdata(self.x_data)
                self.lines.set_ydata(self.y_data)

                self.canvas.draw()

                current_point = current_point + stepvalue_in_mm
                self.take_position(stepvalue_in_mm)

                if not self.start_Initiation:
                    break
                if not self.threading:
                    break
            self.threading = False
        if not self.start_Initiation:
            self.x_data = np.array([])
            self.y_data = np.array([])
            self.lines.set_xdata(self.x_data)
            self.lines.set_ydata(self.y_data)
            self.canvas.draw()
            self.notebook.add(self.settingsframe, text="Settings")
            self.status_retainer()
            sleep(0.2)
            self.t2 = threading.Thread(target=self.display_data, daemon=True)
            self.t2.start()
        elif not self.threading:
            self.without_aperture_x_data = self.x_data
            self.x_data = np.array([])
            self.without_aperture_y_data = self.y_data
            self.x_data = np.array([])
            self.status_retainer()
            sleep(0.2)
            self.t2 = threading.Thread(target=self.display_data, daemon=True)
            self.t2.start()
            self.run_button_without_aperture["state"] = "disabled"
            self.run_button_with_aperture["state"] = "active"
            self.save_data_button["state"] = "active"
            self.save_image_data_button["state"] = "active"
            self.reset_all_button["state"] = "active"
            self.homeButton["state"] = "disabled"
            self.endButton["state"] = "disabled"
            self.startvalueentry["state"] = "disabled"
            self.endvalueentry["state"] = "disabled"
            self.stepvalueentry["state"] = "disabled"
            self.drop_startvalue["state"] = "disable"
            self.drop_stopvalue["state"] = "disable"
            self.drop_stepvalue["state"] = "disable"

    def run_with_aperture_Threading(self):
        sleep(0.1)
        self.threading = True
        self.parameter_checker()
        self.go_home()
        if self.clicked_startvalue.get() == "mm":
            maxima_point_from_home_in_mm = float(self.startvalueentry.get())
        else:
            maxima_point_from_home_in_mm = (float(self.startvalueentry.get()) / 1000)
        if self.clicked_stopvalue.get() == "mm":
            sweeping_distance_in_mm = float(self.endvalueentry.get())
        else:
            sweeping_distance_in_mm = (float(self.endvalueentry.get()) / 1000)
        if self.clicked_stepvalue.get() == "mm":
            stepvalue_in_mm = float(self.stepvalueentry.get())
        else:
            stepvalue_in_mm = (float(self.stepvalueentry.get()) / 1000)
        self.sendCommand(self.clockwiseCommand)
        if self.receiveCommand() == self.clockwise_ok:
            self.take_position(maxima_point_from_home_in_mm - sweeping_distance_in_mm)
        initial_point = -sweeping_distance_in_mm
        final_point = sweeping_distance_in_mm
        self.ax.set_xlim([initial_point, final_point])
        current_point = initial_point
        self.x_data = np.array([])
        self.y_data = np.array([])
        self.lines.set_xdata(self.x_data)
        self.lines.set_ydata(self.y_data)
        self.lines2.set_xdata(self.x_data)
        self.lines2.set_ydata(self.y_data)
        self.lines.set_color("red")
        self.canvas.draw()
        while (current_point < final_point) and self.threading and self.start_Initiation:
            self.x_data = np.append(self.x_data, current_point)
            self.y_data = np.append(self.y_data, float(self.detector.query("read?")))
            y_max = self.y_data.max()
            y_min = self.y_data.min()

            y_min = y_min - (y_min * 0.01)
            y_max = y_max + (y_max * 0.01)
            self.ax.set_ylim([y_min, y_max])
            self.lines.set_xdata(self.x_data)
            self.lines.set_ydata(self.y_data)

            self.canvas.draw()

            current_point = current_point + stepvalue_in_mm
            self.take_position(stepvalue_in_mm)

            if not self.start_Initiation:
                break
            if not self.threading:
                break
        self.threading = False
        if not self.start_Initiation:
            self.x_data = np.array([])
            self.y_data = np.array([])
            self.lines.set_xdata(self.x_data)
            self.lines.set_ydata(self.y_data)
            self.canvas.draw()
            self.run_button_with_aperture["text"] = "Start Run with Aperture"
            sleep(0.2)
            self.t2 = threading.Thread(target=self.display_data, daemon=True)
            self.t2.start()
            self.com_btn_connect["state"] = "active"
            self.save_data_button["state"] = "active"
            self.reset_all_button["state"] = "active"
            self.save_image_data_button["state"] = "active"
        elif not self.threading:
            self.com_btn_connect["state"] = "active"
            self.run_button_with_aperture["text"] = "Run again with Aperture"
            self.with_aperture_x_data = self.x_data
            self.x_data = np.array([])
            self.with_aperture_y_data = self.y_data
            self.y_data = np.array([])
            self.ax.set_xlim([initial_point, final_point])
            y_max = self.without_aperture_y_data.max()
            y_min = self.with_aperture_y_data.min()
            y_min = y_min - (y_min * 0.01)
            y_max = y_max + (y_max * 0.01)

            # self.lines = self.ax.plot(self.without_aperture_x_data, self.without_aperture_y_data, color="tab:blue")[0]
            # self.lines2 = self.ax.plot(self.with_aperture_x_data, self.with_aperture_y_data, color="tab:red")[0]

            self.ax.set_ylim([y_min, y_max])
            self.lines.set_color("blue")
            self.lines.set_xdata(self.without_aperture_x_data)
            self.lines.set_ydata(self.without_aperture_y_data)
            self.lines2.set_color("red")
            self.lines2.set_xdata(self.with_aperture_x_data)
            self.lines2.set_ydata(self.with_aperture_y_data)
            self.canvas.draw()

            sleep(0.2)
            self.t2 = threading.Thread(target=self.display_data, daemon=True)
            self.t2.start()
            self.run_button_without_aperture["state"] = "disabled"
            self.save_data_button["state"] = "active"
            self.reset_all_button["state"] = "active"
            self.save_image_data_button["state"] = "active"